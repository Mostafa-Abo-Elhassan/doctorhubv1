import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import AuthLayout from '../../components/Auth/AuthLayout';

const Register = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
    role: '', // 'ูุฑูุถ', 'ุทุจูุจ', 'ุตูุฏูู', 'ูุนูู'
    nationalId: '',
    gender: '', // 'ุฐูุฑ' ุฃู 'ุฃูุซู'
  });
  const [error, setError] = useState('');

  const primaryColor = 'bg-teal-600 hover:bg-teal-700';
  const linkColor = 'text-teal-600 hover:text-teal-700';

  const roles = [
    { value: '', label: 'ุงุฎุชุฑ ุฏูุฑู...' },
    { value: 'ูุฑูุถ', label: 'ูุฑูุถ (Patient)' },
    { value: 'ุทุจูุจ', label: 'ุทุจูุจ (Doctor)' },
    { value: 'ุตูุฏูู', label: 'ุตูุฏูู (Pharmacist)' },
    { value: 'ูุนูู', label: 'ูุนูู / ุฃุดุนุฉ (Lab / Radiology)' },
  ];

  const genders = [
    { value: '', label: 'ุงุฎุชุฑ ุงูููุน...' },
    { value: 'ุฐูุฑ', label: 'ุฐูุฑ' },
    { value: 'ุฃูุซู', label: 'ุฃูุซู' },
  ];

  // ๐น ุชุญุฏูุซ ุงูุญููู
  const handleChange = (e) => {
    const { name, value } = e.target;

    if (name === 'nationalId') {
      const numericValue = value.replace(/\D/g, '');
      if (numericValue.length <= 14) {
        setFormData({ ...formData, [name]: numericValue });
      }
    } else {
      setFormData({ ...formData, [name]: value });
    }
    setError('');
  };

  // ๐น ุฅุฑุณุงู ุงููููุฐุฌ
  const handleSubmit = async (e) => {
    e.preventDefault();
    const { name, email, password, confirmPassword, role, nationalId, gender } = formData;

    // โ ุชุญูู ูู ุงูุจูุงูุงุช
    if (password.length < 8) {
      setError('ูุฌุจ ุฃู ุชููู ูููุฉ ุงููุฑูุฑ 8 ุฃุญุฑู ุนูู ุงูุฃูู.');
      return;
    }
    if (password !== confirmPassword) {
      setError('ูููุฉ ุงููุฑูุฑ ูุชุฃููุฏูุง ุบูุฑ ูุชุทุงุจููู.');
      return;
    }
    if (!role) {
      setError('ุงูุฑุฌุงุก ุชุญุฏูุฏ ุฏูุฑู ูููุชุงุจุนุฉ.');
      return;
    }
    if (role === 'ูุฑูุถ') {
      if (nationalId.length !== 14 || !/^\d{14}$/.test(nationalId)) {
        setError('ูุฌุจ ุฃู ูุชููู ุงูุฑูู ุงููููู ูู 14 ุฑูููุง ุจุงูุถุจุท.');
        return;
      }
      if (!gender) {
        setError('ุงูุฑุฌุงุก ุชุญุฏูุฏ ุงูููุน (ุฐูุฑ/ุฃูุซู).');
        return;
      }
    }

    try {
      // โ ุชุญุฏูุฏ ุงูุฌุฏูู ุญุณุจ ุงูุฏูุฑ
      let endpoint = '';
      switch (role) {
        case 'ูุฑูุถ': endpoint = 'patients'; break;
        case 'ุทุจูุจ': endpoint = 'doctors'; break;
        case 'ุตูุฏูู': endpoint = 'pharmacies'; break;
        case 'ูุนูู': endpoint = 'labs'; break;
        default: endpoint = 'users';
      }

      // โ ุชุญูู ูู ุงูุจุฑูุฏ ุงูููุฑุฑ
      const existing = await axios.get(`http://DoctorHub.runasp.net/${endpoint}?email=${email}`);
      if (existing.data.length > 0) {
        setError('ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุณุชุฎุฏู ุจุงููุนู. ุฌุฑูุจ ุชุณุฌูู ุงูุฏุฎูู.');
        return;
      }

      // โ ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุฌุฏูุฏ
      const newUser = {
        id: Date.now(), // ุฑูู ูุฑูุฏ
        name,
        email,
        password,
        role,
        ...(role === 'ูุฑูุถ' && { nationalId, gender })
      };

      await axios.post(`http://DoctorHub.runasp.net/${endpoint}`, newUser);

      console.log('โ ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ.');
      navigate('/login');
    } catch (err) {
      console.error(err);
      setError('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุญุณุงุจ. ุชุฃูุฏ ูู ุชุดุบูู ุงูุณูุฑูุฑ.');
    }
  };

  return (
    <AuthLayout
      title="ุฅูุดุงุก ุญุณุงุจ"
      subtitle="ุณุฌู ุจูุงูุงุชู ููุงูุถูุงู ุฅูู ููุตุฉ Doctor Hub ูุจุฏุก ุงูุซูุฑุฉ ุงูุตุญูุฉ."
    >
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* ุงูุงุณู */}
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700 text-right mb-1">
            ุงูุงุณู ุงููุงูู
          </label>
          <input
            id="name"
            name="name"
            type="text"
            required
            value={formData.name}
            onChange={handleChange}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 transition duration-150 text-right"
            placeholder=" ุฃุฏุฎู ุงุณูู ุงููุงูู"
          />
        </div>

        {/* ุงูุจุฑูุฏ */}
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 text-right mb-1">
            ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
          </label>
          <input
            id="email"
            name="email"
            type="email"
            required
            value={formData.email}
            onChange={handleChange}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 transition duration-150 text-right"
            placeholder="ุงุฏุฎู ุจุฑูุฏู ุงูุฅููุชุฑููู"
          />
        </div>

        {/* ุงูุฏูุฑ */}
        <div>
          <label htmlFor="role" className="block text-sm font-medium text-gray-700 text-right mb-1">
            ุงุฎุชุฑ ุฏูุฑู
          </label>
          <select
            id="role"
            name="role"
            required
            value={formData.role}
            onChange={handleChange}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 transition duration-150 text-right appearance-none bg-white pr-4"
          >
            {roles.map((r) => (
              <option key={r.value} value={r.value} disabled={r.value === ''}>
                {r.label}
              </option>
            ))}
          </select>
        </div>

        {/* ุงูุญููู ุงูุฎุงุตุฉ ุจุงููุฑูุถ */}
        {formData.role === 'ูุฑูุถ' && (
          <div className="space-y-4 pt-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="nationalId" className="block text-sm font-medium text-gray-700 text-right mb-1">
                  ุงูุฑูู ุงููููู (14 ุฑูู)
                </label>
                <input
                  id="nationalId"
                  name="nationalId"
                  type="tel"
                  inputMode="numeric"
                  pattern="[0-9]{14}"
                  required={formData.role === 'ูุฑูุถ'}
                  value={formData.nationalId}
                  onChange={handleChange}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 transition duration-150 text-right tracking-widest"
                  placeholder="00000000000000"
                  maxLength={14}
                  minLength={14}
                />
              </div>

              <div>
                <label htmlFor="gender" className="block text-sm font-medium text-gray-700 text-right mb-1">
                  ุงูููุน
                </label>
                <select
                  id="gender"
                  name="gender"
                  required={formData.role === 'ูุฑูุถ'}
                  value={formData.gender}
                  onChange={handleChange}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 transition duration-150 text-right appearance-none bg-white pr-4"
                >
                  {genders.map((g) => (
                    <option key={g.value} value={g.value} disabled={g.value === ''}>
                      {g.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>
        )}

        {/* ูููุฉ ุงููุฑูุฑ */}
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700 text-right mb-1">
            ูููุฉ ุงููุฑูุฑ
          </label>
          <input
            id="password"
            name="password"
            type="password"
            required
            value={formData.password}
            onChange={handleChange}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 transition duration-150 text-right"
            placeholder="********"
          />
        </div>

        <div>
          <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 text-right mb-1">
            ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ
          </label>
          <input
            id="confirmPassword"
            name="confirmPassword"
            type="password"
            required
            value={formData.confirmPassword}
            onChange={handleChange}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-teal-500 focus:border-teal-500 transition duration-150 text-right"
            placeholder="********"
          />
        </div>

        {/* ุฑุณุงูุฉ ุงูุฎุทุฃ */}
        {error && <p className="text-sm text-red-600 text-right">{error}</p>}

        {/* ุฒุฑ ุงูุฅูุดุงุก */}
        <div>
          <button
            type="submit"
            className={`w-full flex justify-center py-3 px-4 rounded-lg shadow-sm text-sm font-medium text-white ${primaryColor} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 transition duration-200`}
          >
            ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ
          </button>
        </div>
      </form>

      <p className="mt-6 text-center text-sm text-gray-600">
        ูู ูุฏูู ุญุณุงุจ ุจุงููุนูุ{' '}
        <a href="/login" className={`font-medium ${linkColor}`}>
          ุชุณุฌูู ุงูุฏุฎูู
        </a>
      </p>
    </AuthLayout>
  );
};

export default Register;
